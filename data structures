#include <iostream>
#include <stack>
#include <string>
#include <unordered_map>

using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/' || op == '%')
        return 2;
    return 0;
}

string infix_to_postfix(const string& expression) {
    string postfix;
    stack<char> opStack;

    unordered_map<char, int> operators = {{'+', 1}, {'-', 1}, {'*', 2}, {'/', 2}, {'%', 2}};

    for (char token : expression) {
        if (isdigit(token))
            postfix += token;
        else if (token == '(')
            opStack.push(token);
        else if (token == ')') {
            while (!opStack.empty() && opStack.top() != '(') {
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.pop(); // Pop the '('
        }
        else if (operators.find(token) != operators.end()) {
            while (!opStack.empty() && precedence(opStack.top()) >= precedence(token)) {
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.push(token);
        }
        else {
            cerr << "Invalid token: " << token << endl;
            exit(1);
        }
    }

    while (!opStack.empty()) {
        postfix += opStack.top();
        opStack.pop();
    }

    return postfix;
}

int main() {
    string infix_expression;
    cout << "Enter the infix expression: ";
    getline(cin, infix_expression);

    string postfix_expression = infix_to_postfix(infix_expression);
    cout << "Postfix expression: " << postfix_expression << endl;

    return 0;
}
